{"version":3,"sources":["components/Table.js","components/RowDetails.js","components/ModeSelector.js","components/Search.js","components/Form.js","App.js","reportWebVitals.js","index.js"],"names":["Table","data","onSelectRow","search","currentPage","setCurrentPage","items","config","useState","sortConfig","setSortConfig","sortedItems","useMemo","sortableItems","sort","a","b","key","direction","requestSort","useSortableData","filteredData","filter","it","firstName","toLowerCase","includes","lastName","email","getFilteredData","pageCount","Math","ceil","length","indexOfLastItem","indexOfFirstItem","currentItems","slice","className","onClick","map","idx","id","phone","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","pageNumber","selected","containerClassName","activeClassName","pageClassName","pageLinkClassName","previousClassName","previousLinkClassName","nextClassName","nextLinkClassName","RowDetails","row","defaultValue","description","address","streetAddress","city","state","zip","ModeSelector","onSelectMode","Search","onSearch","value","setValue","type","onChange","e","target","Form","setData","isFormVisible","setIsFormVisible","setId","setFirstName","setLastName","setEmail","setPhone","isSubmitEnabled","setIsSubmitEnabled","useEffect","trim","onSubmit","newData","Number","htmlFor","min","max","disabled","App","loading","setLoading","modeSelected","setModeSelected","setRow","setSearch","fetchData","url","axios","then","resp","console","log","selectedRow","selectedMode","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2969e930.chunk.js","sourcesContent":["import React, { useState, useMemo } from 'react'\nimport ReactPaginate from 'react-paginate'\n\n\nconst Table = ({ data, onSelectRow, search, currentPage, setCurrentPage }) => {\n\n  const useSortableData = (items, config = null) => {\n    const [sortConfig, setSortConfig] = useState(config);\n\n    const sortedItems = useMemo(() => {\n      const sortableItems = [...items];\n      if (sortConfig !== null) {\n        sortableItems.sort((a, b) => {\n          if (a[sortConfig.key] < b[sortConfig.key]) {\n            return sortConfig.direction === 'asc' ? -1 : 1;\n          }\n          if (a[sortConfig.key] > b[sortConfig.key]) {\n            return sortConfig.direction === 'asc' ? 1 : -1;\n          }\n          return 0;\n        });\n      }\n      return sortableItems;\n    }, [items, sortConfig]);\n\n    const requestSort = key => {\n      let direction = 'asc';\n      if (sortConfig && sortConfig.key === key && sortConfig.direction === 'asc') {\n        direction = 'desc';\n      }\n      setSortConfig({ key, direction });\n    }\n\n    return { items: sortedItems, requestSort, sortConfig };\n  }\n\n  const { items, requestSort, sortConfig } = useSortableData(data);\n\n  const getFilteredData = (items, search) => {\n     if (!search) {\n       return items\n     }\n\n    return items.filter(it => {\n      return it.firstName.toLowerCase().includes(search.toLowerCase())\n      || it.lastName.toLowerCase().includes(search.toLowerCase())\n      || it.email.toLowerCase().includes(search.toLowerCase())\n    })\n  }\n\n\n  const filteredData = getFilteredData(items, search)\n  const itemsPerPage = 50\n  const pageCount = Math.ceil(filteredData.length / itemsPerPage)\n  const indexOfLastItem = currentPage * itemsPerPage;\n  const indexOfFirstItem = indexOfLastItem - itemsPerPage;\n  const currentItems = filteredData.slice(\n    indexOfFirstItem,\n    indexOfLastItem\n  );\n  const paginate = (pageNumber) => {\n    setCurrentPage(pageNumber.selected+1)\n  }\n\n\n  return (\n    <div>\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th onClick={() => requestSort('id')} >Id {sortConfig && sortConfig.key === 'id' ? <small>{sortConfig.direction}</small> : null}</th>\n          <th onClick={() => requestSort('firstName')}>First Name {sortConfig && sortConfig.key === 'firstName' ? <small>{sortConfig.direction}</small> : null}</th>\n          <th onClick={() => requestSort('lastName')}>Last Name {sortConfig && sortConfig.key === 'lastName' ? <small>{sortConfig.direction}</small> : null}</th>\n          <th onClick={() => requestSort('email')}>Email {sortConfig && sortConfig.key === 'email' ? <small>{sortConfig.direction}</small> : null}</th>\n          <th onClick={() => requestSort('phone')}>Phone {sortConfig && sortConfig.key === 'phone' ? <small>{sortConfig.direction}</small> : null}</th>\n        </tr>\n      </thead>\n      <tbody>\n        {currentItems.map((it, idx) => (\n          <tr key={idx} onClick={() => onSelectRow(it)}>\n            <td>{it.id}</td>\n            <td>{it.firstName}</td>\n            <td>{it.lastName}</td>\n            <td>{it.email}</td>\n            <td>{it.phone}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n\n    {data.length > 50\n      ? <ReactPaginate\n          previousLabel={'previous'}\n          nextLabel={'next'}\n          breakLabel={'...'}\n          breakClassName={'break-me'}\n          pageCount={pageCount}\n          marginPagesDisplayed={2}\n          pageRangeDisplayed={5}\n          onPageChange={paginate}\n          containerClassName={'pagination'}\n          activeClassName={'active'}\n          pageClassName=\"page-item\"\n          pageLinkClassName=\"page-link\"\n          previousClassName=\"page-item\"\n          previousLinkClassName=\"page-link\"\n          nextClassName=\"page-item\"\n          nextLinkClassName=\"page-link\"\n        />\n      : null\n    }\n    </div>\n  )\n}\n\nexport default Table","import React from \"react\";\n\n\nconst RowDetails = ({ row }) => {\n\n  return (\n    <div>\n      <p>User selected: <b>{row.firstName} {row.lastName}</b></p>\n      <p>Details:</p>\n      <p><textarea defaultValue={row.description} /></p>\n      <p>Address: <b>{row.address.streetAddress}</b></p>\n      <p>City: <b>{row.address.city}</b></p>\n      <p>State: <b>{row.address.state}</b></p>\n      <p>Zip code: <b>{row.address.zip}</b></p>\n    </div>\n  );\n};\n\nexport default RowDetails","import React from 'react'\n\nconst ModeSelector = ({ onSelectMode }) => {\n\n  const littleDataUrl = `http://www.filltext.com/?rows=32&id={number|1000}&firstName={firstName}&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`\n  const bigDataUrl = `http://www.filltext.com/?rows=1000&id={number|1000}&firstName={firstName}&delay=3&lastName={lastName}&email={email}&phone={phone|(xxx)xxx-xx-xx}&address={addressObject}&description={lorem|32}`\n\n  return (\n    <div>\n      <button className=\"btn btn-primary\" onClick={() => onSelectMode(littleDataUrl)}>32 ITEMS</button>\n      <button className=\"btn btn-warning\" onClick={() => onSelectMode(bigDataUrl)}>1000 ITEMS</button>\n    </div>\n  )\n}\n\nexport default ModeSelector","import React, {useState} from 'react'\n\nconst Search = ({ onSearch }) => {\n\n  const [value, setValue] = useState('')\n\n  return (\n    <div className=\"input-group mb-3 mt-3\">\n      <input type=\"text\" className=\"form-control\" value={value} onChange={(e) => setValue(e.target.value)}/>\n      <div className=\"input-group-append\">\n        <button className=\"btn btn-outline-secondary\" id=\"search-button\" onClick={() => onSearch(value)}>Search</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Search","import React, {useEffect, useState} from 'react'\n\n\nconst Form = ({ data, setData }) => {\n\n  const [isFormVisible, setIsFormVisible] = useState(false)\n  const [id, setId] = useState('')\n  const [firstName, setFirstName] = useState('')\n  const [lastName, setLastName] = useState('')\n  const [email, setEmail] = useState('')\n  const [phone, setPhone] = useState('')\n  const [isSubmitEnabled, setIsSubmitEnabled] = useState(false)\n\n  useEffect( () => {\n      if (id !== '' && firstName !== '' && lastName !== '' && email !== '' && phone !== '') {\n        if (id.trim !== '' && firstName.trim !== '' && lastName.trim !== '' && email.trim !== '' && phone.trim !== '') {\n          setIsSubmitEnabled(true)\n        } else {\n          setIsSubmitEnabled(false)\n        }\n      }\n  }, [id, firstName, lastName, email, phone])\n\n\n  const onSubmit = () => {\n\n    const newData = [{\n      id: Number(id),\n      firstName,\n      lastName,\n      email,\n      phone,\n      address: {\n        streetAddress: '',\n        city: '',\n        state: '',\n        zip: ''\n      },\n      description: '',\n    }, ...data]\n\n    setData(newData)\n    setIsFormVisible(!isFormVisible)\n  }\n\n\n  return (\n          !isFormVisible\n          ? <button className=\"button-top btn btn-primary btn-sm\" onClick={() => setIsFormVisible(!isFormVisible)}>Add Info</button>\n          : <form className=\"form\" onSubmit={onSubmit}>\n              <table className=\"form-table\">\n                <thead>\n                  <tr>\n                    <td>\n                      <label htmlFor=\"id\">id</label>\n                    </td>\n                    <td>\n                      <label htmlFor=\"firstName\">firstName</label>\n                    </td>\n                    <td>\n                      <label htmlFor=\"lastName\">lastName</label>\n                    </td>\n                    <td>\n                      <label htmlFor=\"email\">email</label>\n                    </td>\n                    <td>\n                      <label htmlFor=\"phone\">phone</label>\n                    </td>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>\n                      <input\n                        type=\"text\"\n                        id=\"id\"\n                        min=\"0\"\n                        max=\"1000\"\n                        value={id}\n                        onChange={(e) => setId(e.target.value)} />\n                    </td>\n                    <td>\n                      <input\n                        type=\"text\"\n                        id=\"firstName\"\n                        value={firstName}\n                        onChange={(e) => setFirstName(e.target.value)} />\n                    </td>\n                    <td>\n                      <input\n                        type=\"text\"\n                        id=\"lastName\"\n                        value={lastName}\n                        onChange={(e) => setLastName(e.target.value)} />\n                    </td>\n                    <td>\n                      <input\n                        type=\"email\"\n                        id=\"email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)} />\n                    </td>\n                    <td>\n                      <input\n                        type=\"tel\"\n                        id=\"phone\"\n                        value={phone}\n                        onChange={(e) => setPhone(e.target.value)} />\n                    </td>\n                  </tr>\n                </tbody>\n              </table>\n              <div className=\"footer\">\n                <button\n                  className=\"btn btn-primary add-button\"\n                  disabled={!isSubmitEnabled}>\n                    Add\n                </button>\n                <button\n                  className=\"btn btn-danger add-button\">\n                    Back\n                </button>\n              </div>\n            </form>\n  )\n}\n\nexport default Form","\nimport './App.css';\nimport React, { useState } from 'react';\nimport axios from 'axios'\nimport Table from './components/Table'\nimport RowDetails from './components/RowDetails'\nimport ModeSelector from './components/ModeSelector'\nimport Search from './components/Search'\nimport Form from './components/Form'\n\n\nconst App = () => {\n\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(false)\n  const [modeSelected, setModeSelected] = useState(false)\n  const [row, setRow] = useState(null)\n  const [search, setSearch] = useState('')\n  const [currentPage, setCurrentPage] = useState(1)\n\n  const fetchData = async(url) => {\n    setLoading(true)\n    try {\n      await axios(url).then(resp => setData(resp.data))\n    } catch(e) {\n      console.log(e)\n    }\n    setLoading(false)\n  }\n\n  const onSelectMode = selectedMode => {\n      fetchData(selectedMode)\n      setModeSelected(true)\n  }\n\n  const onSelectRow = selectedRow => {\n  setRow(selectedRow)\n}\n\n  const onSearch = value => {\n    setSearch(value)\n    setCurrentPage(1)\n  }\n\n\n  return (\n\n    !modeSelected\n    ? <div className=\"mode-selector-container\">\n        <ModeSelector onSelectMode={onSelectMode}/>\n    </div>\n\n    : <div className=\"container\">\n\n      { loading ? <h1 className=\"loader\">Loading...</h1>\n      : <>\n          <div className=\"header\">\n            <Form data={data} setData={setData} />\n            <Search onSearch={onSearch} />\n          </div>\n          <Table\n            data={data}\n            onSelectRow={onSelectRow}\n            search={search}\n            currentPage={currentPage}\n            setCurrentPage={setCurrentPage} />\n        </>\n      }\n\n\n      { row ? <RowDetails row={row} /> : null}\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}